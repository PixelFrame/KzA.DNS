using KzA.DNS.DataModel;
using KzA.DNS.Packet;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit.Abstractions;

namespace KzA.DNS.Test
{
    public class UnitTest2(ITestOutputHelper output)
    {
        private readonly ITestOutputHelper output = output;

        [Fact]
        public void TestParseQuery()
        {
            var data = Convert.FromHexString("450101000001000000000000075F667573696F6E055F7175696303656C6504636F72700873796D70686F6E79036F72670000FF0001");
            var query = DnsMessage.Parse(data);
            Assert.True(query.Questions[0].QName.ToString() == "_fusion._quic.ele.corp.symphony.org.");
            Assert.True(query.Questions[0].QType == RRType.Any);
            Assert.True(query.Questions[0].QClass == Class.IN);
        }

        [Fact]
        public void TestParseResponseSrv()
        {
            var data = Convert.FromHexString
            var resp = DnsMessage.Parse(data);
            Assert.True(resp.Answers.Count == 10);
            Assert.True(((SrvData)resp.Answers[0].RData).Port == 3547);
        }

        [Fact]
        public void TestParseResponseAAAAwCNAME()
        {
            var data = Convert.FromHexString("4e5c8180000100050000000004697076360f6d736674636f6e6e6563747465737403636f6d00001c0001c00c000500010000055c001f0a6e63736976362d67656f0e747261666669636d616e61676572036e657400c03600050001000003e2002504697076360f6d736674636f6e6e6563747465737403636f6d09656467657375697465c050c06100050001000001000014056131393638046936673106616b616d6169c050c092001c000100000014001026001417e800000000000000b81a7f20c092001c000100000014001026001417e800000000000000b81a7f19");
            var resp = DnsMessage.Parse(data);
            Assert.True(resp.Answers.Count == 5);
            Assert.True(((HostData)resp.Answers[1].RData).ToString() == "ipv6.msftconnecttest.com.edgesuite.net.");
        }

        [Fact]
        public void TestParseResponseAwSOA()
        {
            var data = Convert.FromHexString("1d398180000100030001000004697076360f6d736674636f6e6e6563747465737403636f6d0000010001c00c000500010000055c001f0a6e63736976362d67656f0e747261666669636d616e61676572036e657400c03600050001000003e2002504697076360f6d736674636f6e6e6563747465737403636f6d09656467657375697465c050c06100050001000001000014056131393638046936673106616b616d6169c050c09800060001000000130031066e3069366731c09d0a686f73746d617374657206616b616d6169c021675907c7000003e8000003e8000003e800000013");
            var resp = DnsMessage.Parse(data);
            Assert.True(resp.Answers.Count == 3);
            Assert.True(resp.Authorities.Count == 1);
            Assert.True(((SoaData)resp.Authorities[0].RData).SERIAL == 1733887943);
        }

        [Fact]
        public void TestParseTcpTkey()
        {
            var data = Convert.FromHexString("07d400010000000100000000000109323036382d6d732d370936332d6635386636372436613139636638382d623734622d313165662d623333392d6533663765613831393033640000f9000109323036382d6d732d370936332d6635386636372436613139636638382d623734622d313165662d623333392d6533663765613831393033640000f900ff000000000746086773732d7473696700675907c9675a594900030000072c6082072806062b0601050502a082071c30820718a018301606092a864882f71201020206092a864886f712010202a28206fa048206f6608206f206092a864886f71201020201006e8206e1308206dda003020105a10302010ea20703050020000000a3820503618204ff308204fba003020105a1131b11434f52502e53594d50484f4e592e4f5247a2273025a003020102a11e301c1b03444e531b156463612e636f72702e73796d70686f6e792e6f7267a38204b4308204b0a003020112a103020109a28204a20482049e2e038919395447e483e5faf266bc4b2f999d4d81261e91235199aa8dfeea973859183b37e3037607edbbfc4a03863651f1dd83cbe985fa5b0c85df93bdc770d8a3b0f75cc3f66769ffc779bf72e6cb613a2e04aadcf2fb560168381e37cf1fd7af9de04889459d83e933dc942a37e04c9fb733521b52a4c26b271109266f1057a930e492afd34584477dd167b7806f5c3349d2d6af799b278a27881478934eacef632c63fae8da28f212f74ffd565f4c49d9bad340e0c0cd0df49a8f80cedf4b1082abad319f36cb23217fc0cc1d31737acd45ac19e8b7de7c95ebad7b2e249fa05fbb016c161b2c35ad7af5c146dfa6b34362a69bb86c28965f38cf436011fdbe0470c8f853fbd80491ee0dc4c9811d0f8b115f0b59a521b78f4a2e1132e3047da68b77028eedd6808cef06f1ef024e83d2a207a9088378192266ea8b062bf68a2373df5e7d9a203d2292c34893a34ed68302ddc0ecd3e2b648898b7e7fc12a2a01e40f8834b9190fd8028946dd197b5a584ba73719e508553d40f1d4dcc03db7a555d4dcec6f718b7bbe9df5deaa0db3c2efd52f8204f4bb8436a8c4557d97496e5e3a6ca7ca90d077df3df27e0f2fedc8e6b4b6e08fa900e21316d5beee48c339c20dd46bbad1e68a5000560a88de2a0255c6152d01d9b60aea76dcd31b07d6c281fe984d42d57b4d6145c9ac3c3d91b78b1b98ca350349b541eecbb8d7f725934627a93f4af8bed7365df654b771dbb2eca952adeeb52e527058cfe0b21955781d7521b2f0e482d5541bce7ee256916eab032a31af6df7cb81242263667e0b1b4410a0925248cfc3c38dd0ccd3f5cc9673664092ba23d895602940b2549410ba431e6b931150102a1a701da0dfad991daa5488cbd4b244523b8ddca8c5aef8cf50bc72f152e03a0ff01e288b9aea8bd1cd1a85b840f2240e19bb8ef9ed8ac3172e488332d31a840aee2e1801fcffe2ab492d4884e1cb24324644e66a3c06f7339a196b7592467106f876f37dd3380c6fa1c8b63fa4955753298215c1bf2c630e124377730834d878ef43bb48665d7b61bf7d5254cb51221636974af6a50a7943fd29a151fd2c8e586810bbcfd45c3a1ace573683c97123d2eacbb545814d52cb0c4cf8d1ebf1717349fdcb58c24bd2f4b6b8ef18a7c27b0be12bc1b9cc1644288acb36e52bd5b1c55b314c55d46147c40790993aad901f08c617830fe17ac65a02005f22a77f2af82128c3e2a9eabdebcbdb6c9e523ac7772e91264ad5483e6e61d04760d734532fa38f800bb1b78be34f543fcaac6150aea091bfb5f63b105a8f1d54d46dd67f407bd1f90d54edba169660b678e3361f7192dd6bcd0e399b42ac0a7b4986d584fa5d666d95e90c883000bdc2959d1bf36166d267457759cf3d29177decd2912df71f974bf88f1eafecbe11d296d1b8da04cc5c5e4f4e666cefc060afd2eb15a366e22d0e76aca2bc614729796656101fbac17950392fa9d47c554b752f9ebda2b930f805a6b068de072ce79b833916fa6122c206536eacdfa0adf874e86f2108bc271546f9d648205102d84d13fc4ea7d2d86190ac026342d18c19e01f7f29f8096b2ac4de4a73affaf73b25039309b4cbc73360e21e4fb24fc597352f69e645381742bf2b1753e436414db8c028bde055cdbad1aba48201bf308201bba003020112a28201b2048201ae239cae38ee98456fc6afa47aa35fe3477d1bb3f7ddd11b0093e32af8704dae0b38c652bb03458c199a8b0467952654669fcb8c352d4c7ca3f08594d9daceaa13900d7831f55c2611c21fc4062e108f3483b9764799c109507d77e1f4b40baab093ef9b4f3c11b6f617037d678f4bdd6d7d669aa75ffd0c0e244621430713f43acb187782a5bd5a70df015cf92ae96fd829a449b5e999f74a3e1df949da9e8e79796c77610e8c8cfaeeca4611e35ba64994537868f58c2479cbe0ef943939041f0a71e2a3e4c9238354ac9ac5297682a8dbfcee45c7d22e5b96c18181dc3d1351db3a89fd568535e185b7aded94a52ee288912e3892f08162aba2b5bc41049bb05d248f781dcd218af801d34f91e340aa18b4804f93e23ce6ee7dc02f0a8d02784a60333e6f585b21e66ec9be01b5ce2cb45a7da6c1ad2f090c0c8ecdc86249acde2da96a0e8d02ba0b9495594aecd8d12e82ae25b7fdcd3430d47dcf01be3d5f072ad7bcff136593a4c082a286854169657f70b19def7f170b18beaceb5b31dff3155712bf9e367dd8c6369ea6d69b72c2ea8176592ced9155e764d1d0d9cc5b92be6b90834107f0ab312a0fdc350000");
            var query = DnsMessage.Parse(data, true);
            Assert.True(query.Additionals[0].Name.ToString() == "2068-ms-7.63-f58f67.6a19cf88-b74b-11ef-b339-e3f7ea81903d.");
        }

        [Fact]
        public void TestParseUpdateResp()
        {
            var data = Convert.FromHexString("df5ca800000100010002000001660161013101320165013101640162013401380164016603697036046172706100000600010164016301320137013301310131016101350165016101350137013201320163013101300130013001660161013101320165013101640162013401380164016603697036046172706100000500fe000000000000c032000c00ff000000000000c032000c0001000004b00019054442472d4104636f72700873796d70686f6e79036f726700");
            var resp = DnsMessage.Parse(data);
            Assert.True(resp.Prerequisites[0].Class == Class.NONE);
        }

        [Fact]
        public void TestParseQueryAwEDNS()
        {
            var data = Convert.FromHexString("e2cf010000010000000000010861727261793831390470726f6402646f03647370026d70096d6963726f736f667403636f6d00000100010000290fa0000080000000");
            var query = DnsMessage.Parse(data);
            Assert.True(query.Additionals[0].EDNS_UdpPayloadSize == 4000);
            Assert.True(query.Additionals[0].EDNS_DO);
        }

        [Fact]
        public void TestParseResponseAwEDNS()
        {
            var data = Convert.FromHexString("e2cf818000010001000000010861727261793831390470726f6402646f03647370026d70096d6963726f736f667403636f6d0000010001c00c000100010000059c00043489791900002904c8000080000000");
            var resp = DnsMessage.Parse(data);
            Assert.True(resp.Additionals[0].EDNS_UdpPayloadSize == 1224);
            Assert.True(resp.Additionals[0].EDNS_DO);
        }
    }
}
